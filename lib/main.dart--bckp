import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutter_pitch_detection/flutter_pitch_detection.dart';
import 'dart:math' as math;
import 'package:wakelock_plus/wakelock_plus.dart';
import 'package:vibration/vibration.dart'; // ✅ for haptic feedback

void main() {
  runApp(const GuitarTunerApp());
}

class GuitarTunerApp extends StatelessWidget {
  const GuitarTunerApp({super.key});

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(
      home: TunerHome(),
      debugShowCheckedModeBanner: false,
    );
  }
}

class TunerHome extends StatefulWidget {
  const TunerHome({super.key});

  @override
  State<TunerHome> createState() => _TunerHomeState();
}

class _TunerHomeState extends State<TunerHome> {
  final FlutterPitchDetection _pitchDetector = FlutterPitchDetection();
  StreamSubscription<Map<String, dynamic>>? _sub;

  bool _isRecording = false;
  bool _autoMode = true;

  String _note = "";
  String _noteOctave = "";
  double _frequency = 0.0;
  bool _isOnPitch = false;
  double _pitchDeviation = 0.0;
  double _volume = 0.0;

  String? _targetNote;
  int? _targetOctave;
  double? _targetFrequency;

  GuitarString? _lastDetectedString;
  DateTime _lastLockTime = DateTime.now();
  final Set<String> _completedStrings = {};

  // frequency smoothing buffer
  final List<double> _recentFrequencies = [];
  final int _smoothingWindow = 5;

  // Standard guitar strings
  final List<GuitarString> _strings = [
    GuitarString('Low E', 'E', 2, 82.41),
    GuitarString('A', 'A', 2, 110.0),
    GuitarString('D', 'D', 3, 146.83),
    GuitarString('G', 'G', 3, 196.0),
    GuitarString('B', 'B', 3, 246.94),
    GuitarString('High E', 'E', 4, 329.63),
  ];

  @override
  void initState() {
    super.initState();
    WakelockPlus.enable();
  }

  @override
  void dispose() {
    WakelockPlus.disable();
    _sub?.cancel();
    _pitchDetector.stopDetection();
    super.dispose();
  }

  Future<void> _startListening() async {
    if (_isRecording) return;
    try {
      _resetCompletedStrings();
      await _pitchDetector.startDetection();
      final rec = await _pitchDetector.isRecording();
      if (!mounted) return;
      setState(() {
        _isRecording = rec;
      });

      _pitchDetector.setParameters(
        toleranceCents: 0.6,
        bufferSize: 8196,
        sampleRate: 44100,
        minPrecision: 0.8,
        a4Reference: 440.0,
      );

      _sub = _pitchDetector.onPitchDetected.listen((data) {
        final freq = (data['frequency'] ?? 0.0).toDouble();
        final vol = (data['volume'] ?? 0.0).toDouble();

        if (freq < 70 || freq > 1000) return;
        if (vol < 0.01) return;

        // smoothing: add to buffer & average
        _recentFrequencies.add(freq);
        if (_recentFrequencies.length > _smoothingWindow) {
          _recentFrequencies.removeAt(0);
        }
        final smoothedFreq =
            _recentFrequencies.reduce((a, b) => a + b) /
            _recentFrequencies.length;

        if (!_autoMode && _targetFrequency != null) {
          final cents = _centsFromFrequencyDiff(
            smoothedFreq,
            _targetFrequency!,
          );
          if (cents.abs() > 100) return;
        }

        if (!mounted) return;
        setState(() {
          _note = data['note'] ?? '';
          _noteOctave = data['noteOctave'] ?? '';
          _frequency = smoothedFreq;
          _isOnPitch = data['isOnPitch'] ?? false;
          _pitchDeviation = (data['pitchDeviation'] ?? 0.0).toDouble();
          _volume = vol;
        });

        if (_autoMode) {
          final nearest = _findNearestString(smoothedFreq);

          // use cents-based proximity guard
          final centsProximity = _centsFromFrequencyDiff(
            smoothedFreq,
            nearest.frequency,
          );
          if (centsProximity.abs() <= 50) {
            final now = DateTime.now();
            final bool shouldLock =
                _lastDetectedString == null ||
                _lastDetectedString != nearest ||
                now.difference(_lastLockTime) >
                    const Duration(milliseconds: 900);

            if (shouldLock) {
              _lastDetectedString = nearest;
              _lastLockTime = now;
              _selectString(nearest, auto: true);
            }

            if (_isOnPitch &&
                _targetNote == nearest.note &&
                _targetOctave == nearest.octave) {
              final id = '${nearest.note}${nearest.octave}';
              if (!_completedStrings.contains(id)) {
                _completedStrings.add(id);
                _triggerHaptic();
              }
            }
          }
        }
      });
    } catch (e) {
      debugPrint("Start error: $e");
      if (!mounted) return;
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text('Failed to start listening: $e')));
    }
  }

  Future<void> _stopListening() async {
    if (!_isRecording) return;
    try {
      _resetCompletedStrings();
      await _sub?.cancel();
      _sub = null;
      await _pitchDetector.stopDetection();
      if (!mounted) return;
      setState(() {
        _isRecording = false;
        _note = '';
        _noteOctave = '';
        _frequency = 0.0;
        _pitchDeviation = 0.0;
        _isOnPitch = false;
      });
    } catch (e) {
      debugPrint("Stop error: $e");
    }
  }

  void _selectString(GuitarString s, {bool auto = false}) {
    if (!mounted) return;
    setState(() {
      _targetNote = s.note;
      _targetOctave = s.octave;
      _targetFrequency = s.frequency;
    });
  }

  void _resetCompletedStrings() {
    if (!mounted) return;
    setState(() {
      _completedStrings.clear();
      _lastDetectedString = null;
      _targetNote = null;
      _targetOctave = null;
      _targetFrequency = null;
      _recentFrequencies.clear();
    });
  }

  GuitarString _findNearestString(double freq) {
    return _strings.reduce(
      (a, b) => (freq - a.frequency).abs() < (freq - b.frequency).abs() ? a : b,
    );
  }

  double _centsFromFrequencyDiff(double freq, double target) {
    if (freq <= 0 || target <= 0) return 0.0;
    return 1200.0 * (math.log(freq / target) / math.log(2));
  }

  double _currentDeviation() {
    if (_targetFrequency == null || _frequency <= 0) return 0.0;
    return _centsFromFrequencyDiff(_frequency, _targetFrequency!);
  }

  Color _indicatorColor() {
    if (_isOnPitch) return Colors.green;
    final cents = _currentDeviation().abs();
    if (cents < 15) return Colors.white;
    return Colors.red;
  }

  Future<void> _triggerHaptic() async {
    if (await Vibration.hasVibrator() ?? false) {
      Vibration.vibrate(duration: 50);
    }
  }

  @override
  Widget build(BuildContext context) {
    final double deviation = _currentDeviation();

    return Scaffold(
      backgroundColor: Colors.black,
      body: SafeArea(
        child: Column(
          children: [
            // Header with AUTO toggle
            Padding(
              padding: const EdgeInsets.all(12),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  const Text(
                    "Tune Your Guitar",
                    style: TextStyle(
                      color: Colors.white,
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  Row(
                    children: [
                      const Text(
                        "AUTO",
                        style: TextStyle(color: Colors.white, fontSize: 14),
                      ),
                      Switch(
                        value: _autoMode,
                        activeThumbColor: Colors.green,
                        onChanged: (val) {
                          setState(() {
                            _autoMode = val;
                            _resetCompletedStrings();
                          });
                        },
                      ),
                      IconButton(
                        onPressed: _isRecording
                            ? _stopListening
                            : _startListening,
                        icon: Icon(
                          _isRecording ? Icons.mic : Icons.mic_none,
                          color: _isRecording ? Colors.green : Colors.white,
                          size: 28,
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
            const SizedBox(height: 20),

            // Detected note with rounded frequency
            Text(
              _note.isNotEmpty
                  ? "Detected: $_note$_noteOctave (${_frequency.toStringAsFixed(1)} Hz)"
                  : "—",
              style: const TextStyle(
                fontSize: 22,
                color: Colors.white,
                fontWeight: FontWeight.bold,
              ),
            ),

            const SizedBox(height: 20),

            // Indicator
            SizedBox(
              height: 150,
              child: Stack(
                alignment: Alignment.center,
                children: [
                  Container(
                    width: 2,
                    height: double.infinity,
                    color: _isOnPitch ? Colors.green : Colors.white24,
                  ),
                  if (_isOnPitch)
                    Container(
                      width: 48,
                      height: 48,
                      decoration: BoxDecoration(
                        border: Border.all(color: Colors.green, width: 4.0),
                        shape: BoxShape.circle,
                      ),
                      child: const Icon(
                        Icons.check,
                        color: Colors.green,
                        size: 30,
                      ),
                    )
                  else
                    AnimatedAlign(
                      alignment: Alignment(
                        (deviation / 50).clamp(-1.0, 1.0),
                        0,
                      ),
                      duration: const Duration(milliseconds: 200),
                      curve: Curves.easeOut,
                      child: Container(
                        width: 52,
                        height: 52,
                        alignment: Alignment.center,
                        decoration: BoxDecoration(
                          border: Border.all(
                            color: _indicatorColor(),
                            width: 4.0,
                          ),
                          shape: BoxShape.circle,
                        ),
                        child: Text(
                          deviation.abs() < 1
                              ? ""
                              : (deviation > 0
                                    ? "+${deviation.toStringAsFixed(0)}"
                                    : deviation.toStringAsFixed(0)),
                          style: TextStyle(
                            color: _indicatorColor(),
                            fontSize: 14,
                          ),
                        ),
                      ),
                    ),
                ],
              ),
            ),

            const SizedBox(height: 10),
            Text(
              _isOnPitch
                  ? "Perfectly tuned!"
                  : _frequency > 0
                  ? (deviation > 0
                        ? "Tighten your string"
                        : "Loosen your string")
                  : "Start tuning by playing any string",
              style: const TextStyle(color: Colors.white54, fontSize: 14),
            ),

            // Headstock with pegs
            const SizedBox(height: 10),
            SizedBox(
              width: 500,
              height: 490,
              child: Stack(
                alignment: Alignment.center,
                children: [
                  Image.asset(
                    "assets/images/headstock.png",
                    fit: BoxFit.contain,
                  ),
                  Positioned(
                    left: 15,
                    top: 110,
                    child: _pegButton(_strings[2]),
                  ),
                  Positioned(
                    left: 15,
                    top: 185,
                    child: _pegButton(_strings[1]),
                  ),
                  Positioned(
                    left: 15,
                    bottom: 175,
                    child: _pegButton(_strings[0]),
                  ),
                  Positioned(
                    right: 10,
                    top: 110,
                    child: _pegButton(_strings[3]),
                  ),
                  Positioned(
                    right: 10,
                    top: 185,
                    child: _pegButton(_strings[4]),
                  ),
                  Positioned(
                    right: 10,
                    bottom: 175,
                    child: _pegButton(_strings[5]),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _pegButton(GuitarString s) {
    final id = '${s.note}${s.octave}';
    final isCompleted = _completedStrings.contains(id);
    final active = (_targetNote == s.note && _targetOctave == s.octave);

    // compute cents deviation for this peg if it's active
    double deviation = 999;
    if (_targetFrequency != null &&
        _targetNote == s.note &&
        _targetOctave == s.octave) {
      deviation = _centsFromFrequencyDiff(_frequency, s.frequency);
    }

    double progress = 0.0;
    if (deviation != 999) {
      // map -50..+50 cents into 0..1
      progress = (1 - (deviation.abs() / 50.0)).clamp(0.0, 1.0);
    }

    return Stack(
      alignment: Alignment.center,
      children: [
        // Progress ring
        SizedBox(
          width: 50,
          height: 50,
          child: CircularProgressIndicator(
            value: isCompleted ? 1.0 : progress,
            strokeWidth: 5,
            backgroundColor: Colors.grey[800],
            valueColor: AlwaysStoppedAnimation<Color>(
              isCompleted ? Colors.green : Colors.blueAccent,
            ),
          ),
        ),
        // Peg button in center
        ElevatedButton(
          style: ElevatedButton.styleFrom(
            backgroundColor: isCompleted ? Colors.green : Colors.grey[850],
            shape: const CircleBorder(),
            padding: const EdgeInsets.all(18),
            side: active && !isCompleted
                ? const BorderSide(color: Colors.green, width: 2)
                : BorderSide.none,
          ),
          onPressed: (_autoMode || isCompleted)
              ? null
              : () {
                  _selectString(s);
                },
          child: isCompleted
              ? const Icon(Icons.check, color: Colors.white, size: 24)
              : Text(
                  id,
                  style: const TextStyle(color: Colors.white, fontSize: 14),
                ),
        ),
      ],
    );
  }
}

class GuitarString {
  final String label;
  final String note;
  final int octave;
  final double frequency;
  GuitarString(this.label, this.note, this.octave, this.frequency);
}
